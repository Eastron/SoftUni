using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Linq;
using System.Globalization;
using System.Security.Principal;
using System.Transactions;
using System.Runtime.CompilerServices;
using System.Security.Cryptography.X509Certificates;
using System.Text.RegularExpressions;
using StartUp;

namespace DefiningClasses
{
    public class StartUp
    {

        static void Main(string[] args)
        {
            Dictionary<string, Trainer> trainers = new Dictionary<string, Trainer>();

            string input = Console.ReadLine();
            while (input != "Tournament")
            {
                string[] token = input.Split(' ', StringSplitOptions.RemoveEmptyEntries);

                string trainerName = token[0];
                string pokemonName = token[1];
                string element = token[2];
                int health = int.Parse(token[3]);

                Pokemon pokemon = new Pokemon(pokemonName, element, health);
                List<Pokemon> pokemons = new List<Pokemon>();
                pokemons.Add(pokemon);
                Trainer trainer = new Trainer(trainerName, 0, pokemons);


                if (!trainers.ContainsKey(trainer.Name))
                {
                    trainers.Add(trainer.Name, trainer);
                }
                else
                {
                    trainers[trainer.Name].Pokemons.Add(pokemon);
                }

                input = Console.ReadLine();
            }
            input = Console.ReadLine();
            while (input != "End")
            {
                string element = input;

                int count = 0;

                foreach (var trainer in trainers.Values)
                {
                    if (trainer.Pokemons.Any(p => p.Element == element))
                    {
                        trainer.Badges++;
                    }
                    else
                    {
                        for (int i = 0; i < trainer.Pokemons.Count; i++)
                        {
                            trainer.Pokemons[i].Health -= 10;
                            if (trainer.Pokemons[i].Health <= 0)
                            {
                                trainer.Pokemons.RemoveAt(i);
                                i--;
                            }
                        }
                    }
                }

                input = Console.ReadLine();
            }

            foreach (var trainer in trainers.OrderByDescending(x => x.Value.Badges))
            {
                Console.WriteLine($"{trainer.Value.Name} {trainer.Value.Badges} {trainer.Value.Pokemons.Count}");
            }
        }
    }
}
