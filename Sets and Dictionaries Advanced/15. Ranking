using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using System.Text;

namespace Task_01
{

    class Program
    {
        public static void Main()
        {
            Dictionary<string, Dictionary<string, int>> users = new Dictionary<string, Dictionary<string, int>>();
            Dictionary<string, string> contests = new Dictionary<string, string>();

            string input = Console.ReadLine();

            while (input != "end of contests")
            {
                string[] token = input.Split(':', StringSplitOptions.RemoveEmptyEntries).ToArray();
                string contest = token[0];
                string password = token[1];

                if (!contests.ContainsKey(contest))
                {
                    contests.Add(contest, password);
                }

                input = Console.ReadLine();
            }

            input = Console.ReadLine();

            while (input != "end of submissions")
            {
                string[] token = input.Split("=>", StringSplitOptions.RemoveEmptyEntries).ToArray();
                string contest = token[0];
                string password = token[1];
                string username = token[2];
                int points = int.Parse(token[3]);

                if (contests.ContainsKey(contest))
                {
                    if (contests[contest] == password)
                    {
                        if (!users.ContainsKey(username))
                        {
                            users.Add(username, new Dictionary<string, int>());
                            users[username].Add(contest, points);
                        }
                        else
                        {
                            if (users[username].ContainsKey(contest))
                            {
                                if (users[username][contest] < points)
                                {
                                    users[username][contest] = points;
                                }
                            }
                            else
                            {
                                users[username].Add(contest, points);
                            }
                        }
                    }
                }

                input = Console.ReadLine();
            }

            string user = string.Empty;
            int pointMax = 0;

            foreach (var item in users.OrderByDescending(x => x.Value.Values.Sum()))
            {
                user = item.Key;
                pointMax = users[item.Key].Values.Sum();
                break;
            }

            Console.WriteLine($"Best candidate is {user} with total {pointMax} points.");
            Console.WriteLine("Ranking:");
            foreach (var student in users.OrderBy(x => x.Key))
            {
                Console.WriteLine(student.Key);
                foreach (var contest in student.Value.OrderByDescending(x => x.Value))
                {
                    Console.WriteLine($"#  {contest.Key} -> {contest.Value}");
                }
            }
        }
    }
}
